from cassandra.cluster import Cluster
from cassandra.query import BatchStatement
from threading import Thread
import Queue

WORKERS = 2
cluster = Cluster()
session = cluster.connect()
q = Queue.Queue()


class SensorData:
    def __init__(self, variable, year, timestamp, value):
        self.variable = variable
        self.year = year
        self.timestamp = timestamp
        self.value = value


class ContextData(SensorData):
    def __init__(self, variable, year, timestamp, value, key, property_value):
        SensorData.__init__(self, variable, year, timestamp, value)
        self.key = key
        self.property_value = property_value


class TagData(SensorData):
    def __init__(self, variable, year, timestamp, value, tag):
        SensorData.__init__(self, variable, year, timestamp, value)
        self.tag = tag


class TagVariable:
    def __init__(self, tag, variable):
        self.tag = tag
        self.variable = variable


class VariableYear:
    def __init__(self, variable, year):
        self.variable = variable
        self.year = year


# prepared query to insert sensor_data and avoid sql injection
def insert_sensor_data_query():
    query = "insert into historic_data.sensor_data(variable, year, id, timestamp, value, created_at) " \
            "values(?,?,uuid(), ?, ?, dateof(now()));"
    return session.prepare(query)


# data is a list of objects of type SensorData
# all elements in data are inserted in batch to cassandra database
def insert_sensor_data_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_sensor_data_query(), (d.variable, d.year, d.timestamp, d.value))
    session.execute(batch)


# data is an object of type SensorData
def insert_sensor_data(data):
    session.execute(insert_sensor_data_query(), (data.variable, data.year, data.timestamp, data.value))


#  prepared query to insert context_data
def insert_context_data_query():
    query = "insert into historic_data.context_data(variable, key,property_value, year, id, timestamp,value,created_at)"
    query += " values(?,?,?,?, uuid(), ?,?, dateof(now()));"
    return session.prepare(query)


# data is a list of objects of type ContextData
# all elements in data are inserted in batch to cassandra database
def insert_context_data_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_context_data_query(),
                  (d.variable, d.key, d.property_value, d.year, d.timestamp, d.value))
    session.execute(batch)


# data is an object of type ContextData
def insert_context_data(data):
    session.execute(insert_context_data_query(), (
        data.variable, data.key, data.property_value, data.year, data.timestamp, data.value))


def insert_tag_data_query():
    query = "insert into historic_data.tag_data(variable, tag, year, id, timestamp, value, created_at) "
    query += "values(?,?,?,uuid(),?,?,dateof(now()));"
    return session.prepare(query)


def insert_tag_data_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_tag_data_query(), (d.variable, d.tag, d.year, d.timestamp, d.value))
    session.execute(batch)


# data is a dictionary that contains the keys variable, tag, year, timestamp and value,
# the id and created_at fields are automatically generated by cassandra
def insert_tag_data(data):
    session.execute(insert_tag_data_query(),
                    (data.variable, data.tag, data.year, data.timestamp, data.value))


def insert_data_date_query():
    query = "insert into historic_data.data_date(variable, year) values(?, ?);"
    return session.prepare(query)


def insert_data_date_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_data_date_query(), (d.variable, d.year))
    session.execute(batch)


# data is a dictionary that contains the keys
def insert_data_date(data):
    session.execute(insert_data_date_query(), (data.variable, data.year))


def insert_tag_variable_query():
    query = "insert into historic_data.tag_variable(tag, variable) values(?, ?);"
    return session.prepare(query)


def insert_tag_variable_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_tag_variable_query(), (d.tag, d.variable))
    session.execute(batch)


def insert_tag_variable(data):
    session.execute(insert_tag_variable_query(), (data.tag, data.variable))


def insert_variable_tag_query():
    query = "insert into historic_data.variable_tag(tag, variable) values(?, ?);"
    return session.prepare(query)


def insert_variable_tag_batch(data):
    batch = BatchStatement()
    for d in data:
        batch.add(insert_variable_tag_query(), (d.tag, d.variable))
    session.execute(batch)


def insert_variable_tag(data):
    session.execute(insert_variable_tag_query(), (data.tag, data.variable))


# This is the default worker to insert data
# consume is a function that inserts data to the database
def worker_insert_batch(consume):
    while True:
        batch = q.get()
        consume(batch)
        q.task_done()


# start WORKERS workers as daemons to perform a task
# target is the worker function, is the function that will be
# executed as a thread
def start_workers_abstract(consume, target):
    for i in range(WORKERS):
        t = Thread(target=target, args=(consume,))
        t.daemon = True
        t.start()


def start_workers_insert_sensor_data_batch():
    start_workers_abstract(insert_sensor_data_batch, worker_insert_batch)


def perform_insertion(batches):
    for batch in batches:
        q.put(batch)
    q.join()



# c = ContextData('va1xy', 2016, 1999199, 100.0, 'key', 'pv')
# insert_context_data(c)
